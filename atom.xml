<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bolerat</title>
  
  
  <link href="https://bolerat.github.io/atom.xml" rel="self"/>
  
  <link href="https://bolerat.github.io/"/>
  <updated>2023-05-17T09:13:36.824Z</updated>
  <id>https://bolerat.github.io/</id>
  
  <author>
    <name>Bolerat</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>解决优化后的aplayer无法在电脑端置顶</title>
    <link href="https://bolerat.github.io/posts/38459/"/>
    <id>https://bolerat.github.io/posts/38459/</id>
    <published>2023-05-17T09:02:00.000Z</published>
    <updated>2023-05-17T09:13:36.824Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>对左侧层数进行调整</p><a id="more"></a><h3 id="z-index属性"><a href="#z-index属性" class="headerlink" title="z-index属性"></a>z-index属性</h3><p>   <strong>z-index</strong>是针对网页显示中的一个特殊属性。因为显示器是显示的图案是一个二维平面，拥有x轴和y轴来表示位置属性。为了表示三维立体的概念如显示元素的上下层的叠加顺序引入了z-index属性来表示z轴的区别。表示一个元素在叠加顺序上的上下立体关系。（来自<strong>百度百科</strong>）</p><h3 id="设置z-index属性"><a href="#设置z-index属性" class="headerlink" title="设置z-index属性"></a>设置z-index属性</h3><p><strong>注意</strong>：z-index只对定位元素有作用。要设置非static的定位属性（position），z-index才会生效。</p><p>将<code>yilia\layout\layout.ejs</code>中的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;container&quot; q-class&#x3D;&quot;show:isCtnShow&quot;&gt;</span><br></pre></td></tr></table></figure><p>改成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;container&quot; q-class&#x3D;&quot;show:isCtnShow&quot; style&#x3D;&quot;position:relative; z-index:  0;&quot;&gt;</span><br></pre></td></tr></table></figure><p>本解决方法是针对<a href="https://www.yansheng.fun/article/bf60dd05.html" target="_blank" rel="noopener">hexo+yilia添加APlayer音乐播放器</a><br>中的问题：<code>播放器在pc端反而不显示，会被左侧栏挡住，只在手机端显示</code>进行解决，同时也因为我也遇到这种情况，就做了优化。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;对左侧层数进行调整&lt;/p&gt;</summary>
    
    
    
    
    <category term="博客搭建" scheme="https://bolerat.github.io/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>pip的使用以及国内pip镜像源</title>
    <link href="https://bolerat.github.io/posts/39627/"/>
    <id>https://bolerat.github.io/posts/39627/</id>
    <published>2023-05-15T14:30:00.000Z</published>
    <updated>2023-05-17T07:15:23.673Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>直接用<code>pip install</code>安装Python包<strong>太慢了</strong>，经常<strong>time out</strong>，所以用国内镜像源来进行pip安装会更快。</p><a id="more"></a><h3 id="pip是什么"><a href="#pip是什么" class="headerlink" title="pip是什么"></a>pip是什么</h3><p> pip 是一个现代的，通用的 Python 包管理工具。提供了对 Python 包的查找、下载、安装、卸载的功能。注：pip 已内置于 Python 3.4 和 2.7 及以上版本，其他版本需另行安装。（来自<strong>百度百科</strong>）</p><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pip install -i http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple</span><br><span class="line">&#x2F;&#x2F;阿里云 ，其中-i表示用后面的镜像源下载包</span><br><span class="line"></span><br><span class="line">pip install  -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple jwt</span><br><span class="line">&#x2F;&#x2F;例子，用清华源下载jwt（ctf常用的一个库）</span><br></pre></td></tr></table></figure><p>更多用法可见 <a href="https://pip.pypa.io/en/stable/cli/pip_install/" target="_blank" rel="noopener">pip install</a></p><h3 id="国内源"><a href="#国内源" class="headerlink" title="国内源"></a>国内源</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">阿里云：</span><br><span class="line">https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&#x2F;</span><br><span class="line">百度：</span><br><span class="line">https:&#x2F;&#x2F;mirror.baidu.com&#x2F;pypi&#x2F;simple&#x2F;</span><br><span class="line">豆瓣：</span><br><span class="line">http:&#x2F;&#x2F;pypi.douban.com&#x2F;simple&#x2F;</span><br><span class="line">清华：</span><br><span class="line">https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple&#x2F;</span><br><span class="line">中科大：</span><br><span class="line">https:&#x2F;&#x2F;pypi.mirrors.ustc.edu.cn&#x2F;simple&#x2F;</span><br></pre></td></tr></table></figure><p>你也可以访问<a href="https://mirrors.cernet.edu.cn/" target="_blank" rel="noopener">校园网镜像站</a></p><h3 id="常用pip命令"><a href="#常用pip命令" class="headerlink" title="常用pip命令"></a>常用pip命令</h3><p>来自<strong>百度百科</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Usage:</span><br><span class="line">pip  [options]</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">install  安装包安装</span><br><span class="line">download 下载下载包</span><br><span class="line">uninstall  卸载卸载包</span><br><span class="line">freeze  冻结按需求格式安装的包的输出</span><br><span class="line">list 列表列出已安装的包</span><br><span class="line">show  显示已安装软件包的信息</span><br><span class="line">check  检查已安装的软件包是否具有兼容的依赖项</span><br><span class="line">config  配置管理本地和全局配置</span><br><span class="line">search  搜索PyPI查找包</span><br><span class="line">wheel  根据您的需求构建轮子</span><br><span class="line">hash  包存档的哈希计算值</span><br><span class="line">completion 用于命令完成的辅助命令</span><br><span class="line">debug  显示对调试有用的信息</span><br><span class="line">help  帮助显示命令的帮助</span><br></pre></td></tr></table></figure><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">百度百科（pip）：https:&#x2F;&#x2F;baike.baidu.com&#x2F;item&#x2F;PIP&#x2F;20435212</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;直接用&lt;code&gt;pip install&lt;/code&gt;安装Python包&lt;strong&gt;太慢了&lt;/strong&gt;，经常&lt;strong&gt;time out&lt;/strong&gt;，所以用国内镜像源来进行pip安装会更快。&lt;/p&gt;</summary>
    
    
    
    
    <category term="pip" scheme="https://bolerat.github.io/tags/pip/"/>
    
  </entry>
  
  <entry>
    <title>关于getchar与while</title>
    <link href="https://bolerat.github.io/posts/44515/"/>
    <id>https://bolerat.github.io/posts/44515/</id>
    <published>2023-02-04T04:28:00.000Z</published>
    <updated>2023-05-17T07:13:42.784Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>值得注意的是记得<strong>初始化</strong>字符数组和while中运算符的<strong>优先级</strong>     </p><a id="more"></a>     <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()&#123;</span><br><span class="line">char s;</span><br><span class="line">char s2[1001]&#x3D;&#123;&#125;,s1[2]&#x3D;&#123;&#125;;</span><br><span class="line">while((s&#x3D;getchar())!&#x3D;&#39;\n&#39;)&#123;</span><br><span class="line">s1[0]&#x3D;s;</span><br><span class="line">strcat(s2,s1);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;s2;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;值得注意的是记得&lt;strong&gt;初始化&lt;/strong&gt;字符数组和while中运算符的&lt;strong&gt;优先级&lt;/strong&gt;     &lt;/p&gt;</summary>
    
    
    
    
    <category term="C/C++语言基础" scheme="https://bolerat.github.io/tags/C-C-%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>令人难以理解的操作</title>
    <link href="https://bolerat.github.io/posts/54247/"/>
    <id>https://bolerat.github.io/posts/54247/</id>
    <published>2023-01-01T12:27:00.000Z</published>
    <updated>2023-05-17T07:14:04.308Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>刚做完Pat跨年赛的考试，然后账号没了？      </p><a id="more"></a>     <h3 id="难以理解"><a href="#难以理解" class="headerlink" title="难以理解"></a>难以理解</h3><p>或许我是个蒟蒻吧，我只做了几道题。      </p><img src="/pic/patwatt.jpg" alt="1" style="zoom:50%" />          <p>冷静分析：我怀疑是因为这是去年冬季考试老师给我的考试账号吧，所以我的老师<strong>或许</strong>有权限删除我的账号。<strong>但是</strong>我还是无法理解。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;刚做完Pat跨年赛的考试，然后账号没了？      &lt;/p&gt;</summary>
    
    
    
    
    <category term="日常" scheme="https://bolerat.github.io/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>[Bugku CTF]Simple_SSTI_1</title>
    <link href="https://bolerat.github.io/posts/13499/"/>
    <id>https://bolerat.github.io/posts/13499/</id>
    <published>2022-12-11T06:04:00.000Z</published>
    <updated>2023-05-17T07:12:44.942Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>题目链接: <a href="https://ctf.bugku.com/challenges/detail/id/196.html" target="_blank" rel="noopener">https://ctf.bugku.com/challenges/detail/id/196.html</a>   </p><a id="more"></a>    <h1 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h1><p>通过查看源代码，发现：   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You know, in the flask, We often set a secret_key variable.</span><br></pre></td></tr></table></figure><p>果然没有思路就看看源代码，就会有发现。<br>于是就读取所有config变量，其中secret_key变量，就是需要找的flag所在。so:    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;?flag&#x3D;&#123;&#123;config.items()&#125;&#125;</span><br></pre></td></tr></table></figure><p>于是得到：    </p><img src="/pic/ctf_4.jpg" alt="1" style="zoom:50%" />    <h1 id="flask之ssti模版注入"><a href="#flask之ssti模版注入" class="headerlink" title="flask之ssti模版注入"></a>flask之ssti模版注入</h1><p>算了，还是贴大佬的教程吧，Orz。    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;xz.aliyun.com&#x2F;t&#x2F;3679</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;题目链接: &lt;a href=&quot;https://ctf.bugku.com/challenges/detail/id/196.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://ctf.bugku.com/challenges/detail/id/196.html&lt;/a&gt;   &lt;/p&gt;</summary>
    
    
    
    
    <category term="信息安全" scheme="https://bolerat.github.io/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
    <category term="web" scheme="https://bolerat.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>[NSSCTF][SWPUCTF 2021 新生赛]jicao</title>
    <link href="https://bolerat.github.io/posts/5696/"/>
    <id>https://bolerat.github.io/posts/5696/</id>
    <published>2022-12-08T15:52:00.000Z</published>
    <updated>2023-05-17T07:15:07.834Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>题目链接：<a href="https://www.ctfer.vip/problem/384" target="_blank" rel="noopener">https://www.ctfer.vip/problem/384</a></p><a id="more"></a><h3 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h3><p><strong>在阅读代码后发现，当对网站传入一个post型的参数id和一个get型的参数json且满足if条件的内容，则能传回一个flag<br>于是在查阅相关资料后</strong>   </p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">json_decode这个函数是对JSON格式的字符串进行编码</span><br><span class="line"></span><br><span class="line">参数json：待解码的json string格式的字符串，所以我们需要传入get型的参数json并且对他进行解码</span><br><span class="line"></span><br><span class="line">JSON 格式的字符串</span><br><span class="line">$json &#x3D; &#39;&#123;&quot;a&quot;:&quot;php&quot;,&quot;b&quot;:&quot;mysql&quot;,&quot;c&quot;:3&#125;&#39;;</span><br><span class="line">其中a为键，php为a的键值。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">实例：</span><br><span class="line"></span><br><span class="line">  &lt;?php$json &#x3D; &#39;&#123;&quot;a&quot;:&quot;php&quot;,&quot;b&quot;:&quot;mysql&quot;,&quot;c&quot;:3&#125;&#39;;</span><br><span class="line">  $json_Class&#x3D;json_decode($json);</span><br><span class="line">  $json_Array&#x3D;json_decode($json, true);</span><br><span class="line">  print_r($json_Class);</span><br><span class="line">  print_r($json_Array);</span><br><span class="line">  ?&gt;</span><br><span class="line">  程序输出：</span><br><span class="line"></span><br><span class="line">  stdClass Object (</span><br><span class="line">  [a] &#x3D;&gt; php</span><br><span class="line">  [b] &#x3D;&gt; mysql</span><br><span class="line">  [c] &#x3D;&gt; 3 )</span><br><span class="line">  Array (</span><br><span class="line">  [a] &#x3D;&gt; php</span><br><span class="line">  [b] &#x3D;&gt; mysql</span><br><span class="line">  [c] &#x3D;&gt; 3 )</span><br></pre></td></tr></table></figure><p><strong>于是我们利用传入一个post为id=wllNB，再传入json为{“x”:”wllm”}，即可获得动态的flag</strong></p><img src="/pic/ctf_3.jpg" alt="1" style="zoom:50%" />    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">参考：https:&#x2F;&#x2F;www.cnblogs.com&#x2F;kode00&#x2F;p&#x2F;16856963.html</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;题目链接：&lt;a href=&quot;https://www.ctfer.vip/problem/384&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.ctfer.vip/problem/384&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="信息安全" scheme="https://bolerat.github.io/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
    <category term="web" scheme="https://bolerat.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>[NSSCTF][SWPUCTF 2021 新生赛]gift_F12</title>
    <link href="https://bolerat.github.io/posts/11193/"/>
    <id>https://bolerat.github.io/posts/11193/</id>
    <published>2022-12-08T14:48:00.000Z</published>
    <updated>2023-05-17T07:13:08.997Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>题目链接：<a href="https://www.ctfer.vip/problem/382" target="_blank" rel="noopener">https://www.ctfer.vip/problem/382</a></p><a id="more"></a><h2 id="进入环境，发现是个有趣-的gift"><a href="#进入环境，发现是个有趣-的gift" class="headerlink" title="进入环境，发现是个有趣~的gift"></a>进入环境，发现是个有趣~的gift</h2><img src="/pic/ctf_2 (1).jpg" alt="1" style="zoom:50%" /><h2 id="由题目f12，我直接按f12，就发现："><a href="#由题目f12，我直接按f12，就发现：" class="headerlink" title="由题目f12，我直接按f12，就发现："></a>由题目f12，我直接按f12，就发现：</h2><img src="/pic/ctf_2 (3).jpg" alt="1" style="zoom:50%" /><h2 id="but我更改了一下他的目标时间，结果，到了预定时间，仍然没有flag，真的就是“皇帝的礼物”了"><a href="#but我更改了一下他的目标时间，结果，到了预定时间，仍然没有flag，真的就是“皇帝的礼物”了" class="headerlink" title="but我更改了一下他的目标时间，结果，到了预定时间，仍然没有flag，真的就是“皇帝的礼物”了"></a>but我更改了一下他的目标时间，结果，到了预定时间，仍然没有flag，真的就是“皇帝的礼物”了</h2><img src="/pic/ctf_2 (2).jpg" alt="1" style="zoom:50%" />]]></content>
    
    
    <summary type="html">&lt;p&gt;题目链接：&lt;a href=&quot;https://www.ctfer.vip/problem/382&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.ctfer.vip/problem/382&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="信息安全" scheme="https://bolerat.github.io/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
    <category term="web" scheme="https://bolerat.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>SSRF 服务器端请求伪造（学长分享）</title>
    <link href="https://bolerat.github.io/posts/26804/"/>
    <id>https://bolerat.github.io/posts/26804/</id>
    <published>2022-12-06T06:23:42.000Z</published>
    <updated>2023-05-17T07:15:17.481Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码，查看文章</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="4cb0e133612f7f3dd0a6b4f6aee31a23bff3dfefab78918fc91fcbb84b673d1a"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">已加密</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>板子-数据结构</title>
    <link href="https://bolerat.github.io/posts/55177/"/>
    <id>https://bolerat.github.io/posts/55177/</id>
    <published>2022-12-02T16:45:00.000Z</published>
    <updated>2023-05-17T07:13:20.488Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>数据结构模板收集</p><a id="more"></a><h3 id="单链表（数组模拟–静态）"><a href="#单链表（数组模拟–静态）" class="headerlink" title="单链表（数组模拟–静态）"></a>单链表（数组模拟–静态）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">## 单链表操作（数组模拟链表--静态链表） </span><br><span class="line">const int N&#x3D;100010;</span><br><span class="line">int head,e[N],ne[N],idx;</span><br><span class="line">void init()&#123;</span><br><span class="line">head&#x3D;-1;</span><br><span class="line">idx&#x3D;0;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;x插入到头结点 </span><br><span class="line">void add_to_head(int x)&#123;</span><br><span class="line">ne[idx]&#x3D;head;</span><br><span class="line">head&#x3D;idx;</span><br><span class="line">e[idx]&#x3D;x;</span><br><span class="line">idx++;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;x插入到第k个节点后 </span><br><span class="line">void add(int x,int k)&#123;</span><br><span class="line">ne[idx]&#x3D;ne[k];</span><br><span class="line">ne[k]&#x3D;idx;</span><br><span class="line">e[idx]&#x3D;x;</span><br><span class="line">idx++;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;将下标是k的点后面的点删除 </span><br><span class="line">void remove(int k) &#123;</span><br><span class="line">ne[k]&#x3D;ne[ne[k]];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;数据结构模板收集&lt;/p&gt;</summary>
    
    
    
    
    <category term="数据结构" scheme="https://bolerat.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法竞赛" scheme="https://bolerat.github.io/tags/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>[Bugku CTF]社工-进阶收集</title>
    <link href="https://bolerat.github.io/posts/27934/"/>
    <id>https://bolerat.github.io/posts/27934/</id>
    <published>2022-11-29T16:13:00.000Z</published>
    <updated>2023-05-17T07:14:58.379Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>题目链接：<a href="https://ctf.bugku.com/challenges/detail/id/188.html" target="_blank" rel="noopener">https://ctf.bugku.com/challenges/detail/id/188.html</a></p><a id="more"></a><h2 id="先看题目-保护原著，已注释awa"><a href="#先看题目-保护原著，已注释awa" class="headerlink" title="先看题目(保护原著，已注释awa)"></a>先看题目(保护原著，已注释awa)</h2><!-- <img src="/pic/ctf_1.png" alt="1" style="zoom:50%" /> --><h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><p>1.根据图片提示再百度识图，得到地址为西安大雁塔。</p><img src="/pic/ctf_1 (1).jpg" alt="1" style="zoom:50%" /><img src="/pic/ctf_1 (2).jpg" alt="1" style="zoom:50%" /><p>2.进入社工神器百度地图，依据“地铁”相关信息发现小美住在航天城和韦曲南两个站点之间，依据距离画圆发现在“兰乔国际城”，其小区名字拼音则为flag</p><img src="/pic/ctf_1 (3).jpg" alt="1" style="zoom:50%" /><img src="/pic/ctf_1 (4).jpg" alt="1" style="zoom:50%" />]]></content>
    
    
    <summary type="html">&lt;p&gt;题目链接：&lt;a href=&quot;https://ctf.bugku.com/challenges/detail/id/188.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://ctf.bugku.com/challenges/detail/id/188.html&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="信息安全" scheme="https://bolerat.github.io/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
    <category term="社会工程学" scheme="https://bolerat.github.io/tags/%E7%A4%BE%E4%BC%9A%E5%B7%A5%E7%A8%8B%E5%AD%A6/"/>
    
    <category term="MISC" scheme="https://bolerat.github.io/tags/MISC/"/>
    
  </entry>
  
</feed>
